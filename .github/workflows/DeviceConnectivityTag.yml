name: Deploy, Test, and Destroy DeviceConnectivityTag Azure Function App

on:
  workflow_dispatch:
    inputs:
      iot_hub_con_str:
        description: 'IoT Hub Connection String'
        required: true
      azure_client_id:
        description: 'Azure Client ID'
        required: true
      azure_client_secret:
        description: 'Azure Client Secret'
        required: true
        type: string
      azure_tenant_id:
        description: 'Azure Tenant ID'
        required: true
        type: string
      azure_subscription_id:
        description: 'Azure Subscription ID'
        required: true
        type: string
      dynatrace_url:
        description: 'Dynatrace instance'
        required: true
        type: string
      dynatrace_token:
        description: 'Dynatrace instance token'
        required: true
        type: string
      AZURE_FUNCTION_APP_NAME:
        description: 'Name of your function and function app subdomain'
        required: true
        type: string
      RESOURCE_GROUP:
        description: 'Azure Resource Group Name'
        required: true
        type: string



jobs:
  deploy-test-destroy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set environment variables
      run: |
        echo "AZURE_CLIENT_ID=${{ github.event.inputs.azure_client_id }}" >> $GITHUB_ENV
        echo "AZURE_CLIENT_SECRET=${{ github.event.inputs.azure_client_secret }}" >> $GITHUB_ENV
        echo "AZURE_TENANT_ID=${{ github.event.inputs.azure_tenant_id }}" >> $GITHUB_ENV
        echo "AZURE_SUBSCRIPTION_ID=${{ github.event.inputs.azure_subscription_id }}" >> $GITHUB_ENV
        echo "DYNATRACE_URL=${{ github.event.inputs.dynatrace_url }}" >> $GITHUB_ENV
        echo "DYNATRACE_TOKEN=${{ github.event.inputs.dynatrace_token }}" >> $GITHUB_ENV
        echo "AZURE_FUNCTION_APP_NAME=${{ github.event.inputs.AZURE_FUNCTION_APP_NAME }}" >> $GITHUB_ENV
        echo "IOT_HUB_CONNECTION_STRING=${{ github.event.inputs.iot_hub_con_str }}" >> $GITHUB_ENV
        echo "RESOURCE_GROUP=${{ github.event.inputs.RESOURCE_GROUP }}" >> $GITHUB_ENV

    - name: Set up .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.0.x' # Adjust the version as needed

    - name: Restore dependencies
      run: |
        ls -lart
        dotnet restore DeviceConnectivityTag/DeviceConnectivityTag.csproj

    - name: Build project
      run: dotnet build --configuration Release DeviceConnectivityTag/DeviceConnectivityTag.csproj

    - name: Publish project
      run: dotnet publish --configuration Release --output ./publish DeviceConnectivityTag/DeviceConnectivityTag.csproj

    - name: Zip published project
      run: |
        cd ./publish
        zip -r ../functionapp.zip ./*
        cd ..

    - name: Set up Azure CLI
      uses: azure/login@v1
      with:
        creds: >
         {
           "clientId": "${{ env.AZURE_CLIENT_ID }}",
           "clientSecret": "${{ env.AZURE_CLIENT_SECRET }}",
           "tenantId": "${{ env.AZURE_TENANT_ID }}",
           "subscriptionId": "${{ env.AZURE_SUBSCRIPTION_ID }}"
         }
         
    - name: Create Resource Group
      run: |
        az group create --name ${{ env.RESOURCE_GROUP }} --location eastus

    - name: Create Storage Account
      id: create_storage_account
      run: |
        STORAGE_ACCOUNT_NAME=mystorageaccount$RANDOM
        echo "STORAGE_ACCOUNT_NAME=$STORAGE_ACCOUNT_NAME" >> $GITHUB_ENV
        az storage account create --name $STORAGE_ACCOUNT_NAME --location eastus --resource-group  ${{ env.RESOURCE_GROUP }} --sku Standard_LRS --allow-blob-public-access false

    - name: Create Function App with Premium Plan
      run: |
        az functionapp plan create --name myPremiumPlan --resource-group  ${{ env.RESOURCE_GROUP }} --location eastus --number-of-workers 1 --sku EP1
        az functionapp create --name ${{ env.AZURE_FUNCTION_APP_NAME }} --storage-account ${{ env.STORAGE_ACCOUNT_NAME }} --plan myPremiumPlan --resource-group ${{ env.RESOURCE_GROUP }} --functions-version 4 --https-only true

    - name: Wait for Function App to be ready
      run: sleep 120 # Wait for 2 minutes to ensure the function app is fully ready

    - name: current directory content
      run: |
        ls -lart
        ls -lart functionapp.zip
        unzip -l functionapp.zip
        ls -lart
      
    # - name: Deploy Function App
    #   run: |
    #     az functionapp deployment source config-zip --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.AZURE_FUNCTION_APP_NAME }} --src functionapp.zip
    - name: Deploy Function App
      uses: Azure/functions-action@v1.5.1
      with:
        app-name: ${{ env.AZURE_FUNCTION_APP_NAME }}
        package: functionapp.zip       

    - name: Wait for Function App to be ready
      run: sleep 120 # Wait for 2 minutes to ensure the function app is fully ready
      
    - name: Set Function App settings
      run: |
        az functionapp config appsettings set --name ${{ env.AZURE_FUNCTION_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --settings "WEBSITE_RUN_FROM_PACKAGE=1" "DYNATRACE_TOKEN=${{ env.DYNATRACE_TOKEN }}" "DYNATRACE_URL=${{ env.DYNATRACE_URL }}" "AZURE_SUBSCRIPTION_ID=${{ env.AZURE_SUBSCRIPTION_ID }}" "AZURE_TENANT_ID=${{ env.AZURE_TENANT_ID }}" "AZURE_CLIENT_SECRET=${{ env.AZURE_CLIENT_SECRET }}" "AZURE_CLIENT_ID=${{ env.AZURE_CLIENT_ID }}" "IOT_HUB_CONNECTION_STRING=${{ env.IOT_HUB_CONNECTION_STRING }}"
        
    - name: Restart Azure Function App
      run: |
        az functionapp restart --name ${{ env.AZURE_FUNCTION_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }}
        
    - name: Get Function App Key
      id: get_function_key
      run: |
        FUNCTION_KEY=$(az functionapp function keys list --debug --function-name ${{ env.AZURE_FUNCTION_APP_NAME }} \
         --name ${{ env.AZURE_FUNCTION_APP_NAME }} \
         --resource-group ${{ env.RESOURCE_GROUP }} --query "default" -o tsv)
        echo "FUNCTION_KEY=$FUNCTION_KEY" >> $GITHUB_ENV
        

    # - name: Trigger Function App
    #   env:
    #     FUNCTION_APP_NAME: ${{ env.AZURE_FUNCTION_APP_NAME }}
    #   run: |
    #     # Log the start of the script
    #     echo "Starting the function app trigger script..."

    #     # Execute the curl command and capture the HTTP response code
    #     HTTP_RESPONSE=$(curl -s -o response.txt -w "%{http_code}" -X GET "$URL" \
    #       -H "x-functions-key: $FUNCTION_KEY" \
    #       -H "Content-Type: $CONTENT_TYPE")

    #     # Log the HTTP response code
    #     echo "HTTP response code: $HTTP_RESPONSE"

    #     # Check if the HTTP response code is 200 (OK)
    #     if [ "$HTTP_RESPONSE" -eq 200 ]; then
    #       echo "Function app triggered successfully."
    #       cat response.txt
    #     else
    #       echo "Failed to trigger function app. HTTP response code: $HTTP_RESPONSE"
    #       cat response.txt
    #       exit 1
    #     fi

    #     # Log the end of the script
    #     echo "Function app trigger script completed."

    # - name: Trigger Function App
    #   env:
    #     FUNCTION_APP_NAME: ${{ env.AZURE_FUNCTION_APP_NAME }}
    #   run: |
    #     curl -X GET "https://${{ env.FUNCTION_APP_NAME }}.azurewebsites.net/api/${{ env.FUNCTION_APP_NAME }}" \
    #      -H "x-functions-key: ${{ env.FUNCTION_KEY }}" \
    #      -H "Content-Type: application/json" 

    - name: Trigger Azure Function App
      uses: actions/github-script@v5
      env:
        FUNCTION_APP_NAME: ${{ env.AZURE_FUNCTION_APP_NAME }}
      with:
        script: |
          const maxRetries = 3;
          const delay = ms => new Promise(resolve => setTimeout(resolve, ms));

          for (let i = 0; i < maxRetries; i++) {
            try {
              const response = await fetch(`https://${{ env.FUNCTION_APP_NAME }}.azurewebsites.net/api/${{ env.FUNCTION_APP_NAME }}`, {
                method: 'GET',
                headers: {
                  'Content-Type': 'application/json',
                  'x-functions-key': `${{ env.FUNCTION_KEY }}`
                }
              });

              if (response.ok) {
                console.log('Function triggered successfully');
                break;
              } else {
                console.log(`Attempt ${i + 1} failed with status: ${response.status}`);
              }
            } catch (error) {
              console.log(`Attempt ${i + 1} failed with error: ${error.message}`);
            }

            if (i < maxRetries - 1) {
              await delay(10000); // Increased delay to 10 seconds
            } else {
              throw new Error('Failed to trigger function after multiple attempts');
            }
          }    
          
    - name: Wait for Function App processing
      run: sleep 60 # Adjust the sleep time as needed

    - name: Destroy Infrastructure
      run: |
        az group delete --name  ${{ env.RESOURCE_GROUP }} --yes --no-wait
