name: Proactive Change Management
on:
  workflow_dispatch:
    inputs:
      servicenow_instance:
        description: 'ServiceNow instance'
        required: true
        type: string
      microservice_name:
        description: 'Name of your service'
        #required: true
        type: string
      RESOURCE_GROUP:
        description: 'Azure Resource Group Name'
        #required: true
        type: string
      aks_cluster_name:
        description: 'AKS Cluster Name'
        type: string
      aks_resource_group:
        description: 'AKS Resource Group'
        type: string
      aks_credentials:
        description: 'AKS Credential'
        type: string
      change_model:
        description: 'Change model sys_id'
        required: true
        type: string
      std_chg_prod_ver:
        description: 'standard change producer version'
        required: true
        type: string
      assign_group:
        description: 'ServiceNow assignment group'
        required: true
        type: string

jobs:
 build:
   runs-on: ubuntu-latest
   steps:
     - name: Set environment variables
       run: |
         echo "MICROSERVICE_NAME=${{ github.event.inputs.microservice_name }}" >> $GITHUB_ENV
     # Step 1: Checkout the repository
     - name: Checkout repository
       uses: actions/checkout@v2

     # Step 2: Log in to GitHub Container Registry (ghcr.io)
     - name: Log in to GitHub Container Registry
       uses: docker/login-action@v2
       with:
         registry: ghcr.io
         username: ${{ github.actor }}
         password: ${{ secrets.GITHUB_TOKEN }}

     # Step 3: Extract parent folder name (microservice name)
     - name: Get microservice name (parent folder name)
       id: get_service_name
       run: echo "::set-output name=service_name::$(basename $(pwd))"

     - name: directory content
       run: |
         ls -lart

     # Step 4: Build the Docker image using the microservice name as tag
     - name: Build Docker image
       run: |
         docker build -t ghcr.io/${{ github.repository_owner }}/${{ steps.get_service_name.outputs.service_name }}:${{ github.sha }} WeatherForecastApi/.

     # Step 5: Push the Docker image to GitHub Packages
     - name: Push Docker image
       run: |
         docker push ghcr.io/${{ github.repository_owner }}/${{ steps.get_service_name.outputs.service_name }}:${{ github.sha }}

 ci-management:
   runs-on: ubuntu-latest
   needs: build
   outputs:
     ci_sys_id: ${{steps.discover_ci.outputs.ci_sys_id}}
   steps:
     - name: Set environment variables
       run: |
         echo "SERVICENOW_INSTANCE=${{ github.event.inputs.servicenow_instance }}" >> $GITHUB_ENV

     # Extract parent folder name (microservice name)
     - name: Get microservice name (parent folder name)
       id: get_service_name
       run: echo "::set-output name=service_name::$(basename $(pwd))"

     # Step 1: Discover or Create Microservice CI in ServiceNow using the service name
     - name: Discover or Create CI for Microservice in ServiceNow
       id: discover_ci
       run: |
         # Define the ServiceNow instance and authentication
         SN_INSTANCE="${{ env.SERVICENOW_INSTANCE }}.service-now.com"
         SN_USER="${{ env.SERVICENOW_USER }}"
         SN_PASS="${{ env.SERVICENOW_PASSWORD }}"
         SERVICE_NAME="${{ steps.get_service_name.outputs.service_name }}"
         # Encode username and password for Basic Auth
         auth_header=$(echo -n "${{ env.SERVICENOW-USER }}:${{ env.SERVICENOW-PASSWORD }}" | base64)

         # Discover the CI in ServiceNow
         echo "Attempting to discover CI with name: $SERVICE_NAME"
         ci_response=$(curl -s -X GET \
           "https://$SN_INSTANCE/api/now/table/cmdb_ci?sysparm_query=name=$SERVICE_NAME" \
           --user ${{ secrets.SERVICENOW_USER }}:${{ secrets.SERVICENOW_PASSWORD }} \
           --header "Accept: application/json")

         # Extract sys_id and name if the CI exists
         ci_sys_id=$(echo $ci_response | jq -r '.result[0].sys_id')
         ci_name=$(echo $ci_response | jq -r '.result[0].name')

         # Check if CI was found, if not, create it
         if [ -z "$ci_sys_id" ] || [ "$ci_sys_id" == "null" ]; then
           echo "CI not found. Creating a new CI for $SERVICE_NAME..."
           # Create the CI if it doesn't exist
           create_ci_response=$(curl -s -X POST \
             "https://$SN_INSTANCE/api/now/table/cmdb_ci" \
             --user ${{ secrets.SERVICENOW_USER }}:${{ secrets.SERVICENOW_PASSWORD }} \
             --header "Content-Type: application/json" \
             --data '{
               "name": "'"$SERVICE_NAME"'",
               "category": "Application Service",
               "location": "AKS Cluster",
               "app_service_name": "'"$SERVICE_NAME"'"
             }')

           # Extract the sys_id and name of the newly created CI
           ci_sys_id=$(echo $create_ci_response | jq -r '.result.sys_id')
           ci_name=$(echo $create_ci_response | jq -r '.result.name')
           if [ "$ci_sys_id" == "null" ] || [ -z "$ci_sys_id" ]; then
             echo "Error: Failed to create CI for $SERVICE_NAME. Response: $create_ci_response"
             exit 1
           else
             echo "Successfully created CI: $ci_name with sys_id: $ci_sys_id"
           fi
         else
           echo "CI found: $ci_name with sys_id: $ci_sys_id"
         fi

         # Set the output for the discovered or created CI
         echo "ci_sys_id=$ci_sys_id" >> $GITHUB_OUTPUT
         echo "ci_name=$ci_name" >> $GITHUB_OUTPUT

     # Step 2: Print CMDB Item Details
     - name: Print CMDB Item
       run: |
         echo "CMDB Item: ${{ steps.discover_ci.outputs.ci_name }} (sys_id: ${{ steps.discover_ci.outputs.ci_sys_id }})"

 change-request:
   runs-on: ubuntu-latest
   needs: ci-management
   outputs:
     change_number: ${{steps.create_change.outputs.change_number}}
     change_sys_id: ${{steps.create_change.outputs.change_sys_id}}

   steps:
     - name: Set environment variables
       run: |
         echo "SERVICENOW_INSTANCE=${{ github.event.inputs.servicenow_instance }}" >> $GITHUB_ENV
         echo "CHANGE_MODEL=${{github.event.inputs.change_model}}" >> $GITHUB_ENV
         echo "STD_CHG_PROD_VER=${{github.event.inputs.std_chg_prod_ver}}" >> $GITHUB_ENV
         echo "ASSIGNMENT_GROUP=${{github.event.inputs.assign_group}}" >> $GITHUB_ENV
         echo "MICROSERVICE_NAME=${{ github.event.inputs.microservice_name }}" >> $GITHUB_ENV

     # Extract parent folder name (microservice name)
     - name: Get microservice name (parent folder name)
       id: get_service_name
       run: echo "::set-output name=service_name::$(basename $(pwd))"

     # Step 1: Retrieve First Member of Assignment Group
     - name: Get First Member of Assignment Group
       id: get_assigned_to
       run: |
         SN_INSTANCE="${{ env.SERVICENOW_INSTANCE }}.service-now.com"
         SERVICE_NAME="${{ steps.get_service_name.outputs.service_name }}"
         ASSIGNMENT_GROUP="${{ env.ASSIGNMENT_GROUP }}"  # replace with actual assignment group sys_id
         echo "Fetching first member of assignment group $ASSIGNMENT_GROUP..."
         
         # Query ServiceNow for users in the assignment group
         group_members=$(curl -s -X GET \
           "https://$SN_INSTANCE/api/now/table/sys_user_grmember?sysparm_query=group=$ASSIGNMENT_GROUP" \
           --user ${{ secrets.SERVICENOW_USER }}:${{ secrets.SERVICENOW_PASSWORD }} \
           --header "Content-Type: application/json")

         # Extract the sys_id of the first member
         assigned_to=$(echo $group_members | jq -r '.result[0].user.sys_id')
         if [ -z "$assigned_to" ] || [ "$assigned_to" == "null" ]; then
           echo "Error: No members found in the assignment group."
           exit 1
         else
           echo "Assigned to user sys_id: $assigned_to"
           echo "::set-output name=assigned_to::$assigned_to"
         fi

     # Step 2: Create standard change request based on existing change template for brightlayer.
     - name: Create Standard Change Request in ServiceNow
       id: create_change
       run: |
         SN_INSTANCE="${{ env.SERVICENOW_INSTANCE }}.service-now.com"
         SERVICE_NAME="${{ steps.get_service_name.outputs.service_name }}"
         CMDB_CI="${{ needs.ci-management.outputs.ci_sys_id }}"
         chg_model_tmp="${{env.CHANGE_MODEL}}"
         std_chg_ver="${{env.STD_CHG_PROD_VER}}"

         # Get current date and time in YYYY-MM-DD HH:MM:SS format
         PLANNED_START=$(date +"%Y-%m-%d %H:%M:%S")
         PLANNED_END=$(date -d "$PLANNED_START + 1 hour" +"%Y-%m-%d %H:%M:%S")
         ASSIGNED_TO="${{ steps.get_assigned_to.outputs.assigned_to }}"

         echo "Creating a change request for $SERVICE_NAME with CI sys_id: $CMDB_CI..."

         # Construct JSON payload with jq
         json_payload=$(jq -n \
           --arg short_description "Deploy $SERVICE_NAME microservice to AKS" \
           --arg description "Standard change for deploying $SERVICE_NAME microservice to AKS using a pre-approved change model." \
           --arg category "Software" \
           --arg type "standard" \
           --arg chg_model "$chg_model_tmp" \
           --arg std_change_producer_version "$std_chg_ver" \
           --arg cmdb_ci "$CMDB_CI" \
           --arg planned_start "$PLANNED_START" \
           --arg planned_end "$PLANNED_END" \
           --arg assigned_to "$ASSIGNED_TO" \
           '{
             short_description: $short_description,
             description: $description,
             category: $category,
             type: $type,
             chg_model: $chg_model,
             std_change_producer_version: $std_change_producer_version,
             cmdb_ci: $cmdb_ci,
             planned_start_date: $planned_start,
             planned_end_date: $planned_end,
             assigned_to: $assigned_to
           }')

         # Make the API call
         change_request=$(curl -s -X POST \
           "https://$SN_INSTANCE/api/now/table/change_request" \
           --user ${{ secrets.SERVICENOW_USER }}:${{ secrets.SERVICENOW_PASSWORD }} \
           --header "Content-Type: application/json" \
           --data "$json_payload")

         # Extract and print the change request number for debugging
         change_number=$(echo $change_request | jq -r '.result.number')
         change_sys_id=$(echo $change_request | jq -r '.result.sys_id')
         if [ "$change_number" == "null" ] || [ -z "$change_number" ]; then
           echo "Error: Failed to create change request. Response: $change_request"
           exit 1
         else
           echo "Successfully created change request: $change_number"
           echo "change_number=$change_number" >> $GITHUB_OUTPUT
           echo "change_sys_id=$change_sys_id" >> $GITHUB_OUTPUT
         fi

     # Step 3: Move to Scheduled State
     - name: Move Change Request to Scheduled
       run: |
         SN_INSTANCE="${{ env.SERVICENOW_INSTANCE }}.service-now.com"
         SERVICE_NAME="${{ steps.get_service_name.outputs.service_name }}"
         CHANGE_SYS_ID="${{ needs.ci-management.outputs.ci_sys_id }}"
         echo "Moving the change request $CHANGE_SYS_ID to Scheduled state..."
         json_payload=$(jq -n --arg state "Scheduled" '{ state: $state }')
         
         curl -s -X PATCH \
           "https://$SN_INSTANCE/api/now/table/change_request/$CHANGE_SYS_ID" \
           --user ${{ secrets.SERVICENOW_USER }}:${{ secrets.SERVICENOW_PASSWORD }} \
           --header "Content-Type: application/json" \
           --data "$json_payload"

     # Step 4: Move to Implement State
     - name: Move Change Request to Implement
       run: |
         SN_INSTANCE="${{ env.SERVICENOW_INSTANCE }}.service-now.com"
         SERVICE_NAME="${{ steps.get_service_name.outputs.service_name }}"
         CHANGE_SYS_ID="${{ needs.ci-management.outputs.ci_sys_id }}"
         echo "Moving the change request $CHANGE_SYS_ID to Implement state..."
         json_payload=$(jq -n --arg state "Implement" '{ state: $state }')
         curl -s -X PATCH \
           "https://$SN_INSTANCE/api/now/table/change_request/$CHANGE_SYS_ID" \
           --user ${{ secrets.SERVICENOW_USER }}:${{ secrets.SERVICENOW_PASSWORD }} \
           --header "Content-Type: application/json" \
           --data "$json_payload"

     # Print Change Request Number
     - name: Print Change Request Number
       run: |
         echo "ServiceNow Change Request: ${{ steps.create_change.outputs.change_number }} (sys_id: ${{steps.create_change.outputs.change_sys_id }})"

 deploy:
   runs-on: ubuntu-latest
   needs: change-request
   steps:
     - name: Set environment variables
       run: |
         echo "SERVICENOW_INSTANCE=${{ github.event.inputs.servicenow_instance }}" >> $GITHUB_ENV
         echo "MICROSERVICE_NAME=${{ github.event.inputs.microservice_name }}" >> $GITHUB_ENV
         echo "RESOURCE_GROUP=${{ github.event.inputs.RESOURCE_GROUP }}" >> $GITHUB_ENV
         echo "AKS_CLUSTER_NAME=${{github.event.inputs.aks_cluster_name}}" >> $GITHUB_ENV
         echo "AKS_RESOURCE_GROUP=${{github.event.inputs.aks_resource_group}}" >> $GITHUB_ENV
         echo "AKS_CREDENTIALS=${{github.event.inputs.aks_credentials}}" >> $GITHUB_ENV

     # Extract parent folder name (microservice name)
     - name: Get microservice name (parent folder name)
       id: get_service_name
       run: echo "::set-output name=service_name::$(basename $(pwd))"

     # Step 1: Deploy to AKS using Docker image from GitHub Packages
     - name: Deploy to AKS
       id: aks_deployment
       run: |
         # kubectl set image deployment/${{ steps.get_service_name.outputs.service_name }} ${{ steps.get_service_name.outputs.service_name }}= ghcr.io /${{ github.repository_owner }}/${{ steps.get_service_name.outputs.service_name }}:${{ github.sha }}
         # kubectl rollout status deployment/${{ steps.get_service_name.outputs.service_name }}
         echo "deployment successfull"

     # Step 2: Rollback step, runs only if deployment fails
     - name: Rollback Deployment
       if: ${{ failure() }}
       run: |
         echo "Deployment failed, executing rollback..."
         # Rollback command (replace with your actual rollback command)
         # kubectl rollout undo -f deployment.yaml  # replace with actual rollback command

     # Move Change Request to Review State
     - name: Move Change Request to Review
       if: ${{ success() && steps.aks_deployment.conclusion == 'success' }}
       run: |
         SN_INSTANCE="${{ env.SERVICENOW_INSTANCE }}.service-now.com"
         SERVICE_NAME="${{ steps.get_service_name.outputs.service_name }}"
         CHANGE_SYS_ID="${{ needs.ci-management.outputs.ci_sys_id }}"
         echo "Moving the change request $CHANGE_SYS_ID to Review state..."
         json_payload=$(jq -n --arg state "Review" '{ state: $state }')
         curl -s -X PATCH \
           "https://$SN_INSTANCE/api/now/table/change_request/$CHANGE_SYS_ID" \
           --user ${{ secrets.SERVICENOW_USER }}:${{ secrets.SERVICENOW_PASSWORD }} \
           --header "Content-Type: application/json" \
           --data "$json_payload"

     # Step 3: Conditionally close the change request if deployment is successful
     #- name: Close ServiceNow Change Request
     #  if: ${{ success() && steps.aks_deployment.conclusion == 'success' }}
     #  run: |
     #    change_id=${{ needs.change-request.outputs.change_sys_id }}
     #    curl -X PATCH \
     #      "https://${{ env.SERVICENOW_INSTANCE }}.service-now.com/api/now/table/change_request/$change_id" \
     #      --user ${{ secrets.SERVICENOW_USER }}:${{ secrets.SERVICENOW_PASSWORD }} \
     #      --header "Content-Type: application/json" \
     #      --data '{
     #        "state": "Closed",
     #        "close_code": "Successful",
     #        "close_notes": "Deployment of '${{ steps.get_service_name.outputs.service_name }}' to AKS completed successfully"
     #      }'
  
     # Step 4: Conditionally close the change request if rollback was executed
     #- name: Close Change Request - Rolled Back
     #  if: ${{ failure() && steps.aks_deployment.conclusion == 'failure' }}
     #  run: |
     #    CHANGE_SYS_ID=${{ needs.change-request.outputs.change_sys_id }}
     #    echo "Closing the change request $CHANGE_SYS_ID as rolled back..."
     #    # Construct JSON payload for closing the change request as rolled back
     #    json_payload=$(jq -n \
     #      --arg state "Closed" \
     #      --arg close_code "Rolled Back" \
     #      --arg close_notes "Deployment to AKS failed. Rolled back the changes." \
     #      '{
     #        state: $state,
     #        close_code: $close_code,
     #        close_notes: $close_notes
     #      }')
     #    # Close the change request
     #    curl -s -X PATCH \
     #      "https://${{ env.SERVICENOW_INSTANCE }}.service-now.com/api/now/table/change_request/$CHANGE_SYS_ID" \
     #      --user ${{ secrets.SERVICENOW_USER }}:${{ secrets.SERVICENOW_PASSWORD }} \
     #      --header "Content-Type: application/json" \
     #      --data "$json_payload"

           
  
