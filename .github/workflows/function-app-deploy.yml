name: Deploy, Test, and Destroy Azure Function App

on:
  workflow_dispatch:

jobs:
  deploy-test-destroy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.0.x' # Adjust the version as needed

    - name: Restore dependencies
      run: |
        ls -lart
        dotnet restore IotHubCapacityExporter/IotHubCapacityExporter.csproj

    - name: Build project
      run: dotnet build --configuration Release IotHubCapacityExporter/IotHubCapacityExporter.csproj

    - name: Publish project
      run: dotnet publish --configuration Release --output ./publish IotHubCapacityExporter/IotHubCapacityExporter.csproj

    - name: Zip published project
      run: zip -r functionapp.zip ./publish

    - name: Set up Azure CLI
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Create Resource Group
      run: |
        az group create --name  ${{ secrets.RESOURCE_GROUP }} --location eastus

    - name: Create Storage Account
      id: create_storage_account
      run: |
        STORAGE_ACCOUNT_NAME=mystorageaccount$RANDOM
        echo "STORAGE_ACCOUNT_NAME=$STORAGE_ACCOUNT_NAME" >> $GITHUB_ENV
        az storage account create --name $STORAGE_ACCOUNT_NAME --location eastus --resource-group  ${{ secrets.RESOURCE_GROUP }} --sku Standard_LRS --allow-blob-public-access false

    - name: Create Function App with Premium Plan
      run: |
        az functionapp plan create --name myPremiumPlan --resource-group  ${{ secrets.RESOURCE_GROUP }} --location eastus --number-of-workers 1 --sku EP1
        az functionapp create --name ${{ secrets.AZURE_FUNCTION_APP_NAME }} --storage-account ${{ env.STORAGE_ACCOUNT_NAME }} --plan myPremiumPlan --resource-group ${{ secrets.RESOURCE_GROUP }} --functions-version 4 --https-only true


    # - name: Configure Private Endpoint
    #   run: |
    #     az network vnet create --name myVNet --resource-group  ${{ secrets.RESOURCE_GROUP }} --subnet-name mySubnet
    #     az network private-endpoint create --name myPrivateEndpoint --resource-group  ${{ secrets.RESOURCE_GROUP }} --vnet-name myVNet --subnet mySubnet --private-connection-resource-id $(az functionapp show --name myFunctionApp --resource-group  ${{ secrets.RESOURCE_GROUP }} --query id --output tsv) --group-ids sites
    #     az network private-dns zone create --resource-group  ${{ secrets.RESOURCE_GROUP }} --name "privatelink.azurewebsites.net"
    #     az network private-dns link vnet create --resource-group  ${{ secrets.RESOURCE_GROUP }} --zone-name "privatelink.azurewebsites.net" --name myDNSLink --virtual-network myVNet --registration-enabled false
    #     az network private-dns record-set a add-record --resource-group  ${{ secrets.RESOURCE_GROUP }} --zone-name "privatelink.azurewebsites.net" --record-set-name myFunctionApp --ipv4-address $(az network private-endpoint show --name myPrivateEndpoint --resource-group  ${{ secrets.RESOURCE_GROUP }} --query 'customDnsConfigs[0].ipAddresses[0]' --output tsv)
    
    # - name: Configure Private Endpoint
    #   run: |
    #     EXISTING_VNET_NAME=ETN-IT-DSET-Dev-VNet
    #     EXISTING_SUBNET_NAME=snet-data
    #     az network private-endpoint create --name myPrivateEndpoint --resource-group  ${{ secrets.RESOURCE_GROUP }} --vnet-name $EXISTING_VNET_NAME --subnet $EXISTING_SUBNET_NAME --private-connection-resource-id $(az functionapp show --name myFunctionApp --resource-group  ${{ secrets.RESOURCE_GROUP }} --query id --output tsv) --group-ids sites
    #     az network private-dns zone create --resource-group  ${{ secrets.RESOURCE_GROUP }} --name "privatelink.azurewebsites.net"
    #     az network private-dns link vnet create --resource-group  ${{ secrets.RESOURCE_GROUP }} --zone-name "privatelink.azurewebsites.net" --name myDNSLink --virtual-network $EXISTING_VNET_NAME --registration-enabled false
    #     az network private-dns record-set a add-record --resource-group  ${{ secrets.RESOURCE_GROUP }} --zone-name "privatelink.azurewebsites.net" --record-set-name myFunctionApp --ipv4-address $(az network private-endpoint show --name myPrivateEndpoint --resource-group  ${{ secrets.RESOURCE_GROUP }} --query 'customDnsConfigs[0].ipAddresses[0]' --output tsv)

    - name: Deploy Function App
      run: |
        az functionapp deployment source config-zip --resource-group ${{ secrets.RESOURCE_GROUP }} --name ${{ secrets.AZURE_FUNCTION_APP_NAME }} --src functionapp.zip

    - name: Wait for Function App to be ready
      run: sleep 120 # Wait for 2 minutes to ensure the function app is fully ready

    - name: Set Function App settings
      run: |
        az functionapp config appsettings set --name ${{ secrets.AZURE_FUNCTION_APP_NAME }} --resource-group ${{ secrets.RESOURCE_GROUP }} --settings "DYNATRACE_TOKEN=${{ secrets.DYNATRACE_TOKEN }}" "DYNATRACE_URL=${{ secrets.DYNATRACE_URL }}" "IOT_BASIC_TIER=${{ secrets.IOT_BASIC_TIER }}" "IOT_STD_TIER=${{ secrets.IOT_STD_TIER }}" "AZURE_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" "AZURE_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" "AZURE_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}" "AZURE_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" "QUERY_LIMIT=${{ secrets.QUERY_LIMIT }}"

    - name: Get Access Token
      id: get_token
      run: |
        AZURE_ACCESS_TOKEN=$(az account get-access-token --resource=https://management.azure.com --query accessToken --output tsv)
        echo "::set-output name=token::$AZURE_ACCESS_TOKEN"

    - name: Trigger Azure Function App
      uses: actions/github-script@v5
      env:
        FUNCTION_APP_NAME: ${{ secrets.AZURE_FUNCTION_APP_NAME }}
        ACCESS_TOKEN: ${{ steps.get_token.outputs.token }}
      with:
        script: |
          const maxRetries = 10; // Increased retries
          const delay = ms => new Promise(resolve => setTimeout(resolve, ms));

          for (let i = 0; i < maxRetries; i++) {
            try {
              const response = await fetch(`https://${{ env.FUNCTION_APP_NAME }}.azurewebsites.net/api/${{ env.FUNCTION_APP_NAME }}r`, {
                method: 'GET',
                headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${{ env.ACCESS_TOKEN }}`
                }
              });

              if (response.ok) {
                console.log('Function triggered successfully');
                break;
              } else {
                console.log(`Attempt ${i + 1} failed with status: ${response.status}`);
              }
            } catch (error) {
              console.log(`Attempt ${i + 1} failed with error: ${error.message}`);
            }

            if (i < maxRetries - 1) {
              await delay(10000); // Increased delay to 10 seconds
            } else {
              throw new Error('Failed to trigger function after multiple attempts');
            }
          }
          
    - name: Wait for Function App processing
      run: sleep 60 # Adjust the sleep time as needed

    - name: Destroy Infrastructure
      run: |
        az group delete --name  ${{ secrets.RESOURCE_GROUP }} --yes --no-wait
